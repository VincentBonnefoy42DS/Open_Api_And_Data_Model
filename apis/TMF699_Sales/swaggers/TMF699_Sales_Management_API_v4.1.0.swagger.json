{
  "swagger": "2.0",
  "info": {
    "title": "API Sales",
    "description": "## TMF API Reference : TMF 699 - Sales \n\nThis API provides interfaces for Sales Lead, Sales Opportunity, Sales Quote and the other management capabilities to support the sales activities to build relationship with the prospect customer who could be a person or organization that has an interest in the goods and/or services and possibly become the actual customers with one or more Subscriptions.",
    "version": "4.1.0"
  },
  "host": "serverRoot",
  "basePath": "/tmf-api/sales/v4/",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json;charset=utf-8"
  ],
  "produces": [
    "application/json;charset=utf-8"
  ],
  "tags": [
    {
      "name": "salesLead"
    },
    {
      "name": "salesOpportunity"
    },
    {
      "name": "notification listeners (client side)"
    },
    {
      "name": "events subscription"
    }
  ],
  "paths": {
    "/salesLead": {
      "get": {
        "operationId": "listSalesLead",
        "summary": "List or find SalesLead objects",
        "description": "This operation list or find SalesLead entities",
        "tags": [
          "salesLead"
        ],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesLead"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createSalesLead",
        "summary": "Creates a SalesLead",
        "description": "This operation creates a SalesLead entity.",
        "tags": [
          "salesLead"
        ],
        "parameters": [
          {
            "name": "salesLead",
            "description": "The SalesLead to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesLead_Create"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SalesLead"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/salesLead/{id}": {
      "get": {
        "operationId": "retrieveSalesLead",
        "summary": "Retrieves a SalesLead by ID",
        "description": "This operation retrieves a SalesLead entity. Attribute selection is enabled for all first level attributes.",
        "tags": [
          "salesLead"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the SalesLead",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SalesLead"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "patchSalesLead",
        "summary": "Updates partially a SalesLead",
        "description": "This operation updates partially a SalesLead entity.",
        "tags": [
          "salesLead"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the SalesLead",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "salesLead",
            "description": "The SalesLead to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesLead_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/SalesLead"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteSalesLead",
        "summary": "Deletes a SalesLead",
        "description": "This operation deletes a SalesLead entity.",
        "tags": [
          "salesLead"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the SalesLead",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/salesOpportunity": {
      "get": {
        "operationId": "listSalesOpportunity",
        "summary": "List or find SalesOpportunity objects",
        "description": "This operation list or find SalesOpportunity entities",
        "tags": [
          "salesOpportunity"
        ],
        "parameters": [
          {
            "name": "fields",
            "description": "Comma-separated properties to be provided in response",
            "required": false,
            "in": "query",
            "type": "string"
          },
          {
            "name": "offset",
            "description": "Requested index for start of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          },
          {
            "name": "limit",
            "description": "Requested number of resources to be provided in response",
            "required": false,
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "X-Result-Count": {
                "description": "Actual number of items returned in the response body",
                "type": "integer"
              },
              "X-Total-Count": {
                "description": "Total number of items matching criteria",
                "type": "integer"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SalesOpportunity"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "operationId": "createSalesOpportunity",
        "summary": "Creates a SalesOpportunity",
        "description": "This operation creates a SalesOpportunity entity.",
        "tags": [
          "salesOpportunity"
        ],
        "parameters": [
          {
            "name": "salesOpportunity",
            "description": "The SalesOpportunity to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesOpportunity_Create"
            },
            "in": "body"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/SalesOpportunity"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/salesOpportunity/{id}": {
      "get": {
        "operationId": "retrieveSalesOpportunity",
        "summary": "Retrieves a SalesOpportunity by ID",
        "description": "This operation retrieves a SalesOpportunity entity. Attribute selection is enabled for all first level attributes.",
        "tags": [
          "salesOpportunity"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the SalesOpportunity",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "fields",
            "description": "Comma-separated properties to provide in response",
            "required": false,
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/SalesOpportunity"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "operationId": "patchSalesOpportunity",
        "summary": "Updates partially a SalesOpportunity",
        "description": "This operation updates partially a SalesOpportunity entity.",
        "tags": [
          "salesOpportunity"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the SalesOpportunity",
            "required": true,
            "type": "string",
            "in": "path"
          },
          {
            "name": "salesOpportunity",
            "description": "The SalesOpportunity to be updated",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesOpportunity_Update"
            },
            "in": "body"
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/SalesOpportunity"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteSalesOpportunity",
        "summary": "Deletes a SalesOpportunity",
        "description": "This operation deletes a SalesOpportunity entity.",
        "tags": [
          "salesOpportunity"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "Identifier of the SalesOpportunity",
            "required": true,
            "type": "string",
            "in": "path"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hub": {
      "post": {
        "operationId": "registerListener",
        "summary": "Register a listener",
        "description": "Sets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "events subscription"
        ],
        "parameters": [
          {
            "name": "data",
            "schema": {
              "$ref": "#/definitions/EventSubscriptionInput"
            },
            "required": true,
            "in": "body",
            "description": "Data containing the callback endpoint to deliver the information"
          }
        ],
        "responses": {
          "201": {
            "description": "Subscribed",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/hub/{id}": {
      "delete": {
        "operationId": "unregisterListener",
        "summary": "Unregister a listener",
        "description": "Resets the communication endpoint address the service instance must use to deliver information about its health state, execution state, failures and metrics.",
        "tags": [
          "events subscription"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "required": true,
            "in": "path",
            "description": "The id of the registered listener"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/salesLeadCreateEvent": {
      "post": {
        "operationId": "listenToSalesLeadCreateEvent",
        "summary": "Client listener for entity SalesLeadCreateEvent",
        "description": "Example of a client listener for receiving the notification SalesLeadCreateEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/SalesLeadCreateEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/salesLeadAttributeValueChangeEvent": {
      "post": {
        "operationId": "listenToSalesLeadAttributeValueChangeEvent",
        "summary": "Client listener for entity SalesLeadAttributeValueChangeEvent",
        "description": "Example of a client listener for receiving the notification SalesLeadAttributeValueChangeEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/SalesLeadAttributeValueChangeEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/salesLeadStateChangeEvent": {
      "post": {
        "operationId": "listenToSalesLeadStateChangeEvent",
        "summary": "Client listener for entity SalesLeadStateChangeEvent",
        "description": "Example of a client listener for receiving the notification SalesLeadStateChangeEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/SalesLeadStateChangeEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/salesLeadDeleteEvent": {
      "post": {
        "operationId": "listenToSalesLeadDeleteEvent",
        "summary": "Client listener for entity SalesLeadDeleteEvent",
        "description": "Example of a client listener for receiving the notification SalesLeadDeleteEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/SalesLeadDeleteEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/salesOpportunityCreateEvent": {
      "post": {
        "operationId": "listenToSalesOpportunityCreateEvent",
        "summary": "Client listener for entity SalesOpportunityCreateEvent",
        "description": "Example of a client listener for receiving the notification SalesOpportunityCreateEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/SalesOpportunityCreateEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/salesOpportunityAttributeValueChangeEvent": {
      "post": {
        "operationId": "listenToSalesOpportunityAttributeValueChangeEvent",
        "summary": "Client listener for entity SalesOpportunityAttributeValueChangeEvent",
        "description": "Example of a client listener for receiving the notification SalesOpportunityAttributeValueChangeEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/SalesOpportunityAttributeValueChangeEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/salesOpportunityStateChangeEvent": {
      "post": {
        "operationId": "listenToSalesOpportunityStateChangeEvent",
        "summary": "Client listener for entity SalesOpportunityStateChangeEvent",
        "description": "Example of a client listener for receiving the notification SalesOpportunityStateChangeEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/SalesOpportunityStateChangeEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/listener/salesOpportunityDeleteEvent": {
      "post": {
        "operationId": "listenToSalesOpportunityDeleteEvent",
        "summary": "Client listener for entity SalesOpportunityDeleteEvent",
        "description": "Example of a client listener for receiving the notification SalesOpportunityDeleteEvent",
        "tags": [
          "notification listeners (client side)"
        ],
        "parameters": [
          {
            "name": "data",
            "required": true,
            "in": "body",
            "description": "The event data",
            "schema": {
              "$ref": "#/definitions/SalesOpportunityDeleteEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Notified",
            "schema": {
              "$ref": "#/definitions/EventSubscription"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "405": {
            "description": "Method Not allowed",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Addressable": {
      "type": "object",
      "description": "Base schema for adressable entities",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        }
      }
    },
    "AgreementItemRef": {
      "type": "object",
      "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "agreementItemId": {
          "type": "string",
          "description": "Identifier of the agreement"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": [
        "id"
      ]
    },
    "AgreementRef": {
      "type": "object",
      "description": "Agreement reference. An agreement represents a contract or arrangement, either written or verbal and sometimes enforceable by law, such as a service level agreement or a customer price agreement. An agreement involves a number of other business entities, such as products, services, and resources and/or their specifications.",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "name": {
          "type": "string",
          "description": "Name of the agreement"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": [
        "id"
      ]
    },
    "Any": {},
    "BillingAccountRef": {
      "type": "object",
      "description": "BillingAccount reference. A BillingAccount is a detailed description of a bill structure.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the billing account"
        },
        "href": {
          "type": "string",
          "description": "Reference of the billing account"
        },
        "name": {
          "type": "string",
          "description": "Name of the billing account"
        },
        "ratingType": {
          "type": "string",
          "description": "Indicates whether the account follows a specific payment option such as prepaid or postpaid"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": [
        "id"
      ]
    },
    "CategoryRef": {
      "type": "object",
      "description": "The category for grouping recommendations",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "version": {
          "type": "string",
          "description": "Category version"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": [
        "id"
      ]
    },
    "ChannelRef": {
      "type": "object",
      "description": "The channel to which the resource reference to. e.g. channel for selling product offerings, channel for opening a trouble ticket etc..",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "name": {
          "type": "string",
          "description": "Name of the channel."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": [
        "id"
      ]
    },
    "Characteristic": {
      "type": "object",
      "description": "Describes a given characteristic of an object or entity through a name/value pair.",
      "required": [
        "name",
        "value"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the characteristic"
        },
        "name": {
          "type": "string",
          "description": "Name of the characteristic"
        },
        "valueType": {
          "type": "string",
          "description": "Data type of the value of the characteristic"
        },
        "characteristicRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CharacteristicRelationship"
          }
        },
        "value": {
          "$ref": "#/definitions/Any",
          "description": "The value of the characteristic"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "CharacteristicRelationship": {
      "type": "object",
      "description": "Another Characteristic that is related to the current Characteristic;",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the characteristic"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "relationshipType": {
          "type": "string",
          "description": "The type of relationship"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "ContactMedium": {
      "type": "object",
      "description": "Indicates the contact medium that could be used to contact the party.",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "mediumType": {
          "type": "string",
          "description": "Type of the contact medium, such as: email address, telephone number, postal address"
        },
        "preferred": {
          "type": "boolean",
          "description": "If true, indicates that is the preferred contact medium"
        },
        "characteristic": {
          "$ref": "#/definitions/MediumCharacteristic",
          "description": "Any additional characteristic(s) of this contact medium"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The time period that the contact medium is valid for"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "Entity": {
      "type": "object",
      "description": "Base entity schema for use in TMForum Open-APIs",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "EntityRef": {
      "type": "object",
      "description": "Entity reference schema to be use for all entityRef class.",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": [
        "id"
      ]
    },
    "Extensible": {
      "type": "object",
      "description": "Base Extensible schema for use in TMForum Open-APIs",
      "properties": {
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "MarketSegmentRef": {
      "type": "object",
      "description": "provides references to the corresponding market segment as target of product offerings. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the market segment"
        },
        "href": {
          "type": "string",
          "description": "Reference of the market segment"
        },
        "name": {
          "type": "string",
          "description": "Name of the market segment"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "(Class) type of the referred market segment"
        }
      },
      "required": [
        "id"
      ]
    },
    "MarketingCampaignRef": {
      "type": "object",
      "description": "MarketingCampaign reference. Marketing campaign represents the carrier-initiated marketing activity which aims at the better recognition about its brand and offerings by the market",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": [
        "id"
      ]
    },
    "MediumCharacteristic": {
      "type": "object",
      "description": "Describes the contact medium characteristics that could be used to contact a party (an individual or an organization)",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "city": {
          "type": "string",
          "description": "The city"
        },
        "contactType": {
          "type": "string",
          "description": "The type of contact, for example: phone number such as mobile, fixed home, fixed office. postal address such as shipping instalation\u2026"
        },
        "country": {
          "type": "string",
          "description": "The country"
        },
        "emailAddress": {
          "type": "string",
          "description": "Full email address in standard format"
        },
        "faxNumber": {
          "type": "string",
          "description": "The fax number of the contact"
        },
        "phoneNumber": {
          "type": "string",
          "description": "The primary phone number of the contact"
        },
        "postCode": {
          "type": "string",
          "description": "Postcode"
        },
        "socialNetworkId": {
          "type": "string",
          "description": "Identifier as a member of a social network"
        },
        "stateOrProvince": {
          "type": "string",
          "description": "State or province"
        },
        "street1": {
          "type": "string",
          "description": "Describes the street"
        },
        "street2": {
          "type": "string",
          "description": "Complementary street description"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "Money": {
      "type": "object",
      "description": "A base / value business entity used to represent money",
      "properties": {
        "unit": {
          "type": "string",
          "description": "Currency (ISO4217 norm uses 3 letters to define the currency)"
        },
        "value": {
          "type": "number",
          "format": "float",
          "description": "A signed floating point number, the meaning of the sign is according to the context of the API that uses this Data type"
        }
      }
    },
    "Note": {
      "type": "object",
      "description": "Extra information about a given entity",
      "properties": {
        "id": {
          "example": [
            "afa9-3d90aaa8da0f"
          ],
          "type": "string",
          "description": "Identifier of the note within its containing entity"
        },
        "author": {
          "example": [
            "Mr. N. Bene"
          ],
          "type": "string",
          "description": "Author of the note"
        },
        "date": {
          "example": [
            "2020-11-20T08:00:00Z"
          ],
          "type": "string",
          "format": "date-time",
          "description": "Date of the note"
        },
        "text": {
          "example": [
            "This is important"
          ],
          "type": "string",
          "description": "Text of the note"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "Place": {
      "type": "object",
      "description": "Place reference. Place defines the places where the products are sold or delivered.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the place"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the place"
        },
        "name": {
          "type": "string",
          "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "PlaceRef": {
      "type": "object",
      "description": "Place reference. PlaceRef defines the placeRefs where the products are sold or delivered.",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": [
        "id"
      ]
    },
    "Price": {
      "type": "object",
      "description": "Provides all amounts (tax included, duty free, tax rate), used currency and percentage to apply for Price Alteration.",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "percentage": {
          "type": "number",
          "format": "float",
          "description": "Percentage to apply for ProdOfferPriceAlteration"
        },
        "taxRate": {
          "type": "number",
          "format": "float",
          "description": "Tax rate"
        },
        "dutyFreeAmount": {
          "$ref": "#/definitions/Money",
          "description": "All taxes excluded amount (expressed in the given currency)"
        },
        "taxIncludedAmount": {
          "$ref": "#/definitions/Money",
          "description": "All taxes included amount (expressed in the given currency)"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "PriceAlteration": {
      "type": "object",
      "description": "Is an amount, usually of money, that modifies the price charged for an order item.",
      "required": [
        "price",
        "priceType"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "applicationDuration": {
          "type": "integer",
          "description": "Duration during which the alteration applies on the order item price (for instance 2 months free of charge for the recurring charge)"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail the semantics of this order item price alteration"
        },
        "name": {
          "type": "string",
          "description": "Name of the order item price alteration"
        },
        "priceType": {
          "type": "string",
          "description": "A category that describes the price such as recurring, one time and usage."
        },
        "priority": {
          "type": "integer",
          "description": "Priority level for applying this alteration among all the defined alterations on the order item price"
        },
        "recurringChargePeriod": {
          "type": "string",
          "description": "Could be month, week..."
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "Could be minutes, GB..."
        },
        "price": {
          "$ref": "#/definitions/Price"
        },
        "productOfferingPrice": {
          "$ref": "#/definitions/ProductOfferingPriceRef"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "Product": {
      "type": "object",
      "description": "A product offering procured by a customer or other interested party playing a party role. A product is realized as one or more service(s) and / or resource(s).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the product"
        },
        "href": {
          "type": "string",
          "description": "Reference of the product"
        },
        "description": {
          "type": "string",
          "description": "Is the description of the product. It could be copied from the description of the Product Offering."
        },
        "isBundle": {
          "type": "boolean",
          "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering."
        },
        "isCustomerVisible": {
          "type": "boolean",
          "description": "If true, the product is visible by the customer."
        },
        "name": {
          "type": "string",
          "description": "Name of the product. It could be the same as the name of the product offering"
        },
        "orderDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the date when the product was ordered"
        },
        "productSerialNumber": {
          "type": "string",
          "description": "Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router."
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the date from which the product starts"
        },
        "terminationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the date when the product was terminated"
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementItemRef"
          }
        },
        "billingAccount": {
          "$ref": "#/definitions/BillingAccountRef"
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPlaceRefOrValue"
          }
        },
        "product": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductRefOrValue"
          }
        },
        "productCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "productOffering": {
          "$ref": "#/definitions/ProductOfferingRef"
        },
        "productOrderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedProductOrderItem"
          }
        },
        "productPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductPrice"
          }
        },
        "productRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductRelationship"
          }
        },
        "productSpecification": {
          "$ref": "#/definitions/ProductSpecificationRef"
        },
        "productTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductTerm"
          }
        },
        "realizingResource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRef"
          }
        },
        "realizingService": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "status": {
          "$ref": "#/definitions/ProductStatusType",
          "description": "Is the lifecycle status of the product."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "ProductOfferingPriceRef": {
      "type": "object",
      "description": "ProductPriceOffering reference. An amount, usually of money, that is asked for or allowed when a ProductOffering is bought, rented, or leased",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": [
        "id"
      ]
    },
    "ProductOfferingRef": {
      "type": "object",
      "description": "ProductOffering reference. A product offering represents entities that are orderable from the provider of the catalog, this resource includes pricing information.",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": [
        "id"
      ]
    },
    "ProductPrice": {
      "type": "object",
      "description": "An amount, usually of money, that represents the actual price paid by a Customer for a purchase, a rent or a lease of a Product. The price is valid for a defined period of time.",
      "required": [
        "price",
        "priceType"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "description": {
          "type": "string",
          "description": "A narrative that explains in detail the semantics of this product price."
        },
        "name": {
          "type": "string",
          "description": "A short descriptive name such as \"Subscription price\"."
        },
        "priceType": {
          "type": "string",
          "description": "A category that describes the price, such as recurring, discount, allowance, penalty, and so forth."
        },
        "recurringChargePeriod": {
          "type": "string",
          "description": "Could be month, week..."
        },
        "unitOfMeasure": {
          "type": "string",
          "description": "Could be minutes, GB..."
        },
        "billingAccount": {
          "$ref": "#/definitions/BillingAccountRef"
        },
        "price": {
          "$ref": "#/definitions/Price"
        },
        "productOfferingPrice": {
          "$ref": "#/definitions/ProductOfferingPriceRef"
        },
        "productPriceAlteration": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PriceAlteration"
          }
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "ProductRef": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": [
        "id"
      ]
    },
    "ProductRefOrValue": {
      "type": "object",
      "description": "A product to be created defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the product entity and not the RelatedProductRefOrValue class itself",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the product"
        },
        "href": {
          "type": "string",
          "description": "Reference of the product"
        },
        "description": {
          "type": "string",
          "description": "Is the description of the product. It could be copied from the description of the Product Offering."
        },
        "isBundle": {
          "type": "boolean",
          "description": "If true, the product is a ProductBundle which is an instantiation of a BundledProductOffering. If false, the product is a ProductComponent which is an instantiation of a SimpleProductOffering."
        },
        "isCustomerVisible": {
          "type": "boolean",
          "description": "If true, the product is visible by the customer."
        },
        "name": {
          "type": "string",
          "description": "Name of the product. It could be the same as the name of the product offering"
        },
        "orderDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the date when the product was ordered"
        },
        "productSerialNumber": {
          "type": "string",
          "description": "Is the serial number for the product. This is typically applicable to tangible products e.g. Broadband Router."
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the date from which the product starts"
        },
        "terminationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Is the date when the product was terminated"
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementItemRef"
          }
        },
        "billingAccount": {
          "$ref": "#/definitions/BillingAccountRef"
        },
        "place": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPlaceRefOrValue"
          }
        },
        "product": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductRefOrValue"
          }
        },
        "productCharacteristic": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Characteristic"
          }
        },
        "productOffering": {
          "$ref": "#/definitions/ProductOfferingRef"
        },
        "productOrderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedProductOrderItem"
          }
        },
        "productPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductPrice"
          }
        },
        "productRelationship": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductRelationship"
          }
        },
        "productSpecification": {
          "$ref": "#/definitions/ProductSpecificationRef"
        },
        "productTerm": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductTerm"
          }
        },
        "realizingResource": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceRef"
          }
        },
        "realizingService": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceRef"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "status": {
          "$ref": "#/definitions/ProductStatusType",
          "description": "Is the lifecycle status of the product."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "ProductRelationship": {
      "type": "object",
      "description": "Linked products to the one instantiate, such as [bundled] if the product is a bundle and you want to describe the bundled products inside this bundle; [reliesOn] if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful",
      "required": [
        "product",
        "relationshipType"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "relationshipType": {
          "type": "string",
          "description": "Type of the product relationship, such as [bundled] if the product is a bundle and you want to describe the bundled products inside this bundle; [reliesOn] if the product needs another already owned product to rely on (e.g. an option on an already owned mobile access product) [targets] or [isTargeted] (depending on the way of expressing the link) for any other kind of links that may be useful"
        },
        "product": {
          "$ref": "#/definitions/ProductRefOrValue"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "ProductSpecificationRef": {
      "type": "object",
      "description": "Product specification reference: A ProductSpecification is a detailed description of a tangible or intangible object made available externally in the form of a ProductOffering to customers or other parties playing a party role.",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "version": {
          "type": "string",
          "description": "Version of the product specification"
        },
        "targetProductSchema": {
          "$ref": "#/definitions/TargetProductSchema",
          "description": "A target product schema reference. The reference object to the schema and type of target product which is described by product specification."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": [
        "id"
      ]
    },
    "ProductStatusType": {
      "type": "string",
      "description": "Possible values for the status of the product",
      "enum": [
        "created",
        "pendingActive",
        "cancelled",
        "active",
        "pendingTerminate",
        "terminated",
        "suspended",
        "aborted"
      ]
    },
    "ProductTerm": {
      "type": "object",
      "description": "Description of a productTerm linked to this product. This represent a commitment with a duration",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "description": {
          "type": "string",
          "description": "Description of the productTerm"
        },
        "name": {
          "type": "string",
          "description": "Name of the productTerm"
        },
        "duration": {
          "$ref": "#/definitions/Quantity",
          "description": "Duration of the productTerm"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "productTerm validity period"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "Quantity": {
      "type": "object",
      "description": "An amount in a given unit",
      "properties": {
        "amount": {
          "default": 1,
          "type": "number",
          "format": "float",
          "description": "Numeric value in a given unit"
        },
        "units": {
          "type": "string",
          "description": "Unit"
        }
      }
    },
    "RelatedParty": {
      "type": "object",
      "description": "Related Entity reference. A related party defines party or party role linked to a specific entity.",
      "required": [
        "@referredType",
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "role": {
          "type": "string",
          "description": "Role played by the related party"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "RelatedPartyWithContactInfo": {
      "type": "object",
      "description": "Related party specialization that includes contact information",
      "required": [
        "@referredType"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "role": {
          "type": "string",
          "description": "Role played by the related party"
        },
        "contactMedium": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactMedium"
          }
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "RelatedPlaceRefOrValue": {
      "type": "object",
      "description": "Related Entity reference. A related place defines a place described by reference or by value linked to a specific entity. The polymorphic attributes @type, @schemaLocation & @referredType are related to the place entity and not the RelatedPlaceRefOrValue class itself",
      "required": [
        "role"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the place"
        },
        "href": {
          "type": "string",
          "description": "Unique reference of the place"
        },
        "name": {
          "type": "string",
          "description": "A user-friendly name for the place, such as [Paris Store], [London Store], [Main Home]"
        },
        "role": {
          "type": "string"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "RelatedProductOrderItem": {
      "type": "object",
      "description": "RelatedProductOrderItem (ProductOrder item) .The product order item which triggered product creation/change/termination.",
      "required": [
        "orderItemId",
        "productOrderId"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "orderItemAction": {
          "type": "string",
          "description": "Action of the order item for this product"
        },
        "orderItemId": {
          "type": "string",
          "description": "Identifier of the order item where the product was managed"
        },
        "productOrderHref": {
          "type": "string",
          "description": "Reference of the related entity."
        },
        "productOrderId": {
          "type": "string",
          "description": "Unique identifier of a related entity."
        },
        "role": {
          "type": "string",
          "description": "role of the product order item for this product"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      }
    },
    "ResourceRef": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": [
        "id"
      ]
    },
    "SalesLead": {
      "type": "object",
      "description": "A Sales Lead is the identification of a person or organization that has an interest in the goods and/or services provided in the prospect of them becoming Customers with one or more Subscriptions.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the salesLead"
        },
        "href": {
          "type": "string",
          "description": "Reference of the salesLead"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the salesLead creation"
        },
        "description": {
          "type": "string",
          "description": "Unique description of the salesLead"
        },
        "name": {
          "type": "string",
          "description": "Name of the salesLead"
        },
        "rating": {
          "type": "string",
          "description": "Identifies the potential of a salesLead for becoming a sale. Usual ratings for qualified leads are: hot, warm, cold."
        },
        "referredDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the prospect information was received (for example, from a trade show)."
        },
        "statusChangeDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "statusChangeReason": {
          "type": "string",
          "description": "Reason why the status has changed"
        },
        "type": {
          "type": "string",
          "description": "Indicates the nature of the salesLead"
        },
        "category": {
          "$ref": "#/definitions/CategoryRef"
        },
        "channel": {
          "$ref": "#/definitions/ChannelRef"
        },
        "estimatedRevenue": {
          "$ref": "#/definitions/Money",
          "description": "Estimation of the revenue if the salesLead turns into a sale."
        },
        "marketSegment": {
          "$ref": "#/definitions/MarketSegmentRef",
          "description": "MarketSegment reference. A Market Segment is a grouping of Parties, GeographicAreas, SalesChannels, and so forth. MarketSegments are the target of MarketingCampaigns, ProductOfferings, ProductPromotions, ProductPlacements, and ProductPrograms from both internal and external (Competitors, and other Providers) perspective."
        },
        "marketingCampaign": {
          "$ref": "#/definitions/MarketingCampaignRef",
          "description": "Campaign represents the carrier-initiated marketing activity which aims at the better recognition about its brand and offerings by the market."
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "priority": {
          "$ref": "#/definitions/SalesLeadPriorityType"
        },
        "product": {
          "$ref": "#/definitions/ProductRef"
        },
        "productOffering": {
          "$ref": "#/definitions/ProductOfferingRef"
        },
        "productSpecification": {
          "$ref": "#/definitions/ProductSpecificationRef"
        },
        "prospectContact": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactMedium"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "salesOpportunity": {
          "$ref": "#/definitions/SalesOpportunityRef"
        },
        "status": {
          "$ref": "#/definitions/SalesLeadStateType"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the salesLead is valid"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "SalesLead_Create": {
      "type": "object",
      "description": "A Sales Lead is the identification of a person or organization that has an interest in the goods and/or services provided in the prospect of them becoming Customers with one or more Subscriptions.\nSkipped properties: id,href,status,creationDate,statusChangeDate",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Unique description of the salesLead"
        },
        "name": {
          "type": "string",
          "description": "Name of the salesLead"
        },
        "rating": {
          "type": "string",
          "description": "Identifies the potential of a salesLead for becoming a sale. Usual ratings for qualified leads are: hot, warm, cold."
        },
        "referredDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the prospect information was received (for example, from a trade show)."
        },
        "statusChangeReason": {
          "type": "string",
          "description": "Reason why the status has changed"
        },
        "type": {
          "type": "string",
          "description": "Indicates the nature of the salesLead"
        },
        "category": {
          "$ref": "#/definitions/CategoryRef"
        },
        "channel": {
          "$ref": "#/definitions/ChannelRef"
        },
        "estimatedRevenue": {
          "$ref": "#/definitions/Money",
          "description": "Estimation of the revenue if the salesLead turns into a sale."
        },
        "marketSegment": {
          "$ref": "#/definitions/MarketSegmentRef",
          "description": "MarketSegment reference. A Market Segment is a grouping of Parties, GeographicAreas, SalesChannels, and so forth. MarketSegments are the target of MarketingCampaigns, ProductOfferings, ProductPromotions, ProductPlacements, and ProductPrograms from both internal and external (Competitors, and other Providers) perspective."
        },
        "marketingCampaign": {
          "$ref": "#/definitions/MarketingCampaignRef",
          "description": "Campaign represents the carrier-initiated marketing activity which aims at the better recognition about its brand and offerings by the market."
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "priority": {
          "$ref": "#/definitions/SalesLeadPriorityType"
        },
        "product": {
          "$ref": "#/definitions/ProductRef"
        },
        "productOffering": {
          "$ref": "#/definitions/ProductOfferingRef"
        },
        "productSpecification": {
          "$ref": "#/definitions/ProductSpecificationRef"
        },
        "prospectContact": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactMedium"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "salesOpportunity": {
          "$ref": "#/definitions/SalesOpportunityRef"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the salesLead is valid"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "SalesLead_Update": {
      "type": "object",
      "description": "A Sales Lead is the identification of a person or organization that has an interest in the goods and/or services provided in the prospect of them becoming Customers with one or more Subscriptions.\nSkipped properties: id,href,creationDate",
      "properties": {
        "description": {
          "type": "string",
          "description": "Unique description of the salesLead"
        },
        "name": {
          "type": "string",
          "description": "Name of the salesLead"
        },
        "rating": {
          "type": "string",
          "description": "Identifies the potential of a salesLead for becoming a sale. Usual ratings for qualified leads are: hot, warm, cold."
        },
        "referredDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the prospect information was received (for example, from a trade show)."
        },
        "statusChangeDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "statusChangeReason": {
          "type": "string",
          "description": "Reason why the status has changed"
        },
        "type": {
          "type": "string",
          "description": "Indicates the nature of the salesLead"
        },
        "category": {
          "$ref": "#/definitions/CategoryRef"
        },
        "channel": {
          "$ref": "#/definitions/ChannelRef"
        },
        "estimatedRevenue": {
          "$ref": "#/definitions/Money",
          "description": "Estimation of the revenue if the salesLead turns into a sale."
        },
        "marketSegment": {
          "$ref": "#/definitions/MarketSegmentRef",
          "description": "MarketSegment reference. A Market Segment is a grouping of Parties, GeographicAreas, SalesChannels, and so forth. MarketSegments are the target of MarketingCampaigns, ProductOfferings, ProductPromotions, ProductPlacements, and ProductPrograms from both internal and external (Competitors, and other Providers) perspective."
        },
        "marketingCampaign": {
          "$ref": "#/definitions/MarketingCampaignRef",
          "description": "Campaign represents the carrier-initiated marketing activity which aims at the better recognition about its brand and offerings by the market."
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "priority": {
          "$ref": "#/definitions/SalesLeadPriorityType"
        },
        "product": {
          "$ref": "#/definitions/ProductRef"
        },
        "productOffering": {
          "$ref": "#/definitions/ProductOfferingRef"
        },
        "productSpecification": {
          "$ref": "#/definitions/ProductSpecificationRef"
        },
        "prospectContact": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ContactMedium"
          }
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedParty"
          }
        },
        "salesOpportunity": {
          "$ref": "#/definitions/SalesOpportunityRef"
        },
        "status": {
          "$ref": "#/definitions/SalesLeadStateType"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the salesLead is valid"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "SalesLeadPriorityType": {
      "type": "string",
      "description": "Urgency of working this salesOpportunity",
      "enum": [
        "low",
        "medium",
        "high"
      ]
    },
    "SalesLeadRef": {
      "type": "object",
      "description": "provides references to the corresponding market segment as target of product offerings. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the market segment"
        },
        "href": {
          "type": "string",
          "description": "Reference of the market segment"
        },
        "name": {
          "type": "string",
          "description": "Name of the market segment"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "(Class) type of the referred market segment"
        }
      },
      "required": [
        "id"
      ]
    },
    "SalesLeadStateType": {
      "type": "string",
      "description": "Valid values for the lifecycle state of a salesLead resource",
      "enum": [
        "accepted",
        "acknowledged",
        "cancelled",
        "inProgress",
        "pending",
        "rejected"
      ]
    },
    "SalesOpportunity": {
      "type": "object",
      "description": "An opportunity represents a confirmed interest on a product you plan to sale. Once the Opportunity is created, some salesTasks can be done by sales team members, in order to turn the opportunity into a sale ",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the SalesOpportunity"
        },
        "href": {
          "type": "string",
          "description": "Reference of the SalesOpportunity"
        },
        "creationDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the SalesOpportunity creation"
        },
        "description": {
          "type": "string",
          "description": "Unique description of the SalesOpportunity"
        },
        "name": {
          "type": "string",
          "description": "Name of the SalesOpportunity"
        },
        "rating": {
          "type": "string",
          "description": "Identifies the potential of a SalesOpportunity for becoming a sale. Usual ratings for qualified leads are: hot, warm, cold."
        },
        "referredDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the prospect information was received (for example, from a trade show)."
        },
        "statusChangeDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "statusChangeReason": {
          "type": "string",
          "description": "Reason why the status has changed"
        },
        "type": {
          "type": "string",
          "description": "Indicates the nature of the SalesOpportunity"
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementRef"
          }
        },
        "category": {
          "$ref": "#/definitions/CategoryRef"
        },
        "channel": {
          "$ref": "#/definitions/ChannelRef"
        },
        "estimatedRevenue": {
          "$ref": "#/definitions/Money",
          "description": "Estimation of the revenue if the SalesOpportunity turns into a sale."
        },
        "marketSegment": {
          "$ref": "#/definitions/MarketSegmentRef",
          "description": "MarketSegment reference. A Market Segment is a grouping of Parties, GeographicAreas, SalesChannels, and so forth. MarketSegments are the target of MarketingCampaigns, ProductOfferings, ProductPromotions, ProductPlacements, and ProductPrograms from both internal and external (Competitors, and other Providers) perspective."
        },
        "marketingCampaign": {
          "$ref": "#/definitions/MarketingCampaignRef",
          "description": "Campaign represents the carrier-initiated marketing activity which aims at the better recognition about its brand and offerings by the market."
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "priority": {
          "$ref": "#/definitions/SalesOpportunityPriorityType"
        },
        "salesOpportunityItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SalesOpportunityItem"
          }
        },
        "status": {
          "$ref": "#/definitions/SalesOpportunityStateType"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the SalesOpportunity is valid"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "SalesOpportunity_Create": {
      "type": "object",
      "description": "An opportunity represents a confirmed interest on a product you plan to sale. Once the Opportunity is created, some salesTasks can be done by sales team members, in order to turn the opportunity into a sale \nSkipped properties: id,href,status,creationDate,statusChangeDate",
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Unique description of the SalesOpportunity"
        },
        "name": {
          "type": "string",
          "description": "Name of the SalesOpportunity"
        },
        "rating": {
          "type": "string",
          "description": "Identifies the potential of a SalesOpportunity for becoming a sale. Usual ratings for qualified leads are: hot, warm, cold."
        },
        "referredDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the prospect information was received (for example, from a trade show)."
        },
        "statusChangeReason": {
          "type": "string",
          "description": "Reason why the status has changed"
        },
        "type": {
          "type": "string",
          "description": "Indicates the nature of the SalesOpportunity"
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementRef"
          }
        },
        "category": {
          "$ref": "#/definitions/CategoryRef"
        },
        "channel": {
          "$ref": "#/definitions/ChannelRef"
        },
        "estimatedRevenue": {
          "$ref": "#/definitions/Money",
          "description": "Estimation of the revenue if the SalesOpportunity turns into a sale."
        },
        "marketSegment": {
          "$ref": "#/definitions/MarketSegmentRef",
          "description": "MarketSegment reference. A Market Segment is a grouping of Parties, GeographicAreas, SalesChannels, and so forth. MarketSegments are the target of MarketingCampaigns, ProductOfferings, ProductPromotions, ProductPlacements, and ProductPrograms from both internal and external (Competitors, and other Providers) perspective."
        },
        "marketingCampaign": {
          "$ref": "#/definitions/MarketingCampaignRef",
          "description": "Campaign represents the carrier-initiated marketing activity which aims at the better recognition about its brand and offerings by the market."
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "priority": {
          "$ref": "#/definitions/SalesOpportunityPriorityType"
        },
        "salesOpportunityItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SalesOpportunityItem"
          }
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the SalesOpportunity is valid"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "SalesOpportunity_Update": {
      "type": "object",
      "description": "An opportunity represents a confirmed interest on a product you plan to sale. Once the Opportunity is created, some salesTasks can be done by sales team members, in order to turn the opportunity into a sale \nSkipped properties: id,href,creationDate",
      "properties": {
        "description": {
          "type": "string",
          "description": "Unique description of the SalesOpportunity"
        },
        "name": {
          "type": "string",
          "description": "Name of the SalesOpportunity"
        },
        "rating": {
          "type": "string",
          "description": "Identifies the potential of a SalesOpportunity for becoming a sale. Usual ratings for qualified leads are: hot, warm, cold."
        },
        "referredDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the prospect information was received (for example, from a trade show)."
        },
        "statusChangeDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date and time of the last update"
        },
        "statusChangeReason": {
          "type": "string",
          "description": "Reason why the status has changed"
        },
        "type": {
          "type": "string",
          "description": "Indicates the nature of the SalesOpportunity"
        },
        "agreement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AgreementRef"
          }
        },
        "category": {
          "$ref": "#/definitions/CategoryRef"
        },
        "channel": {
          "$ref": "#/definitions/ChannelRef"
        },
        "estimatedRevenue": {
          "$ref": "#/definitions/Money",
          "description": "Estimation of the revenue if the SalesOpportunity turns into a sale."
        },
        "marketSegment": {
          "$ref": "#/definitions/MarketSegmentRef",
          "description": "MarketSegment reference. A Market Segment is a grouping of Parties, GeographicAreas, SalesChannels, and so forth. MarketSegments are the target of MarketingCampaigns, ProductOfferings, ProductPromotions, ProductPlacements, and ProductPrograms from both internal and external (Competitors, and other Providers) perspective."
        },
        "marketingCampaign": {
          "$ref": "#/definitions/MarketingCampaignRef",
          "description": "Campaign represents the carrier-initiated marketing activity which aims at the better recognition about its brand and offerings by the market."
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "priority": {
          "$ref": "#/definitions/SalesOpportunityPriorityType"
        },
        "salesOpportunityItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SalesOpportunityItem"
          }
        },
        "status": {
          "$ref": "#/definitions/SalesOpportunityStateType"
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the SalesOpportunity is valid"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "SalesOpportunityItem": {
      "type": "object",
      "description": "An opportunity represents a confirmed interest on a product you plan to sale. Once the Opportunity is created, some salesTasks can be done by sales team members, in order to turn the opportunity into a sale ",
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier (index) of the SalesOpportunityItem"
        },
        "action": {
          "type": "string",
          "description": "Action to be performed on this sales opportunity item"
        },
        "rating": {
          "type": "string",
          "description": "Identifies the potential of a SalesOpportunity for becoming a sale. Usual ratings for qualified leads are: hot, warm, cold."
        },
        "estimatedRevenue": {
          "$ref": "#/definitions/Money",
          "description": "Estimation of the revenue if the SalesOpportunity turns into a sale."
        },
        "note": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Note"
          }
        },
        "priority": {
          "$ref": "#/definitions/SalesOpportunityPriorityType"
        },
        "product": {
          "$ref": "#/definitions/ProductRefOrValue",
          "description": "A product to be created defined by value or existing defined by reference. The polymorphic attributes @type, @schemaLocation & @referredType are related to the product entity and not the RelatedProductRefOrValue class itself."
        },
        "relatedParty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelatedPartyWithContactInfo"
          }
        },
        "salesLead": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SalesLeadRef"
          }
        },
        "salesOpportunityItemStatus": {
          "$ref": "#/definitions/SalesOpportunityItemStateType"
        },
        "salesTask": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SalesTaskRef"
          }
        },
        "validFor": {
          "$ref": "#/definitions/TimePeriod",
          "description": "The period for which the SalesOpportunity is valid"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        }
      }
    },
    "SalesOpportunityItemStateType": {
      "type": "string",
      "description": "Valid values for the lifecycle state of a salesLead resource",
      "enum": [
        "accepted",
        "acknowledged",
        "cancelled",
        "inProgress",
        "pending",
        "rejected"
      ]
    },
    "SalesOpportunityPriorityType": {
      "type": "string",
      "description": "Urgency of working this salesLead",
      "enum": [
        "low",
        "medium",
        "high"
      ]
    },
    "SalesOpportunityRef": {
      "type": "object",
      "description": "Sales Opportunity is an 'opportunity' to generate revenue from a Sales Account or Sales Lead. Opportunities are the pending deals that need to be tracked and on which Sales Team plans and executes Sales Activities (Events and Tasks). ",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": [
        "id"
      ]
    },
    "SalesOpportunityStateType": {
      "type": "string",
      "description": "Valid values for the lifecycle state of a salesLead resource",
      "enum": [
        "accepted",
        "acknowledged",
        "cancelled",
        "inProgress",
        "pending",
        "rejected"
      ]
    },
    "SalesTaskRef": {
      "type": "object",
      "description": "provides references to the corresponding market segment as target of product offerings. A market segment is grouping of Parties, GeographicAreas, SalesChannels, and so forth.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier of the market segment"
        },
        "href": {
          "type": "string",
          "description": "Reference of the market segment"
        },
        "name": {
          "type": "string",
          "description": "Name of the market segment"
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "(Class) type of the referred market segment"
        }
      },
      "required": [
        "id"
      ]
    },
    "ServiceRef": {
      "type": "object",
      "description": "Service reference, for when Service is used by other entities",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique identifier"
        },
        "href": {
          "type": "string",
          "format": "uri",
          "description": "Hyperlink reference"
        },
        "name": {
          "type": "string",
          "description": "Name of the related entity."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class"
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class Extensible name"
        },
        "@referredType": {
          "type": "string",
          "description": "The actual type of the target instance when needed for disambiguation."
        }
      },
      "required": [
        "id"
      ]
    },
    "TargetProductSchema": {
      "type": "object",
      "description": "The reference object to the schema and type of target product which is described by product specification",
      "required": [
        "@schemaLocation",
        "@type"
      ],
      "properties": {
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "This field provides a link to the schema describing the target product"
        },
        "@type": {
          "type": "string",
          "description": "Class type of the target product"
        }
      }
    },
    "TimePeriod": {
      "type": "object",
      "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
      "properties": {
        "endDateTime": {
          "example": "1985-04-12T23:20:50.52Z",
          "type": "string",
          "format": "date-time",
          "description": "End of the time period, using IETC-RFC-3339 format"
        },
        "startDateTime": {
          "example": "1985-04-12T23:20:50.52Z",
          "type": "string",
          "format": "date-time",
          "description": "Start of the time period, using IETC-RFC-3339 format"
        }
      }
    },
    "EventSubscription": {
      "type": "object",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
      "required": [
        "id",
        "callback"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the listener"
        },
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "EventSubscriptionInput": {
      "type": "object",
      "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
      "required": [
        "callback"
      ],
      "properties": {
        "callback": {
          "type": "string",
          "description": "The callback being registered."
        },
        "query": {
          "type": "string",
          "description": "additional data to be passed"
        }
      }
    },
    "SalesLeadCreateEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/SalesLeadCreateEventPayload"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOcurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occured."
        }
      }
    },
    "SalesLeadCreateEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "salesLead": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/SalesLead"
        }
      }
    },
    "SalesLeadAttributeValueChangeEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOcurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occured."
        },
        "fieldPath": {
          "type": "string",
          "description": "The path identifying the object field concerned by this notification."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/SalesLeadAttributeValueChangeEventPayload"
        }
      }
    },
    "SalesLeadAttributeValueChangeEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "salesLead": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/SalesLead"
        }
      }
    },
    "SalesLeadStateChangeEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/SalesLeadStateChangeEventPayload"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOcurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occured."
        }
      }
    },
    "SalesLeadStateChangeEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "salesLead": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/SalesLead"
        }
      }
    },
    "SalesLeadDeleteEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/SalesLeadDeleteEventPayload"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOcurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occured."
        }
      }
    },
    "SalesLeadDeleteEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "salesLead": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/SalesLead"
        }
      }
    },
    "SalesOpportunityCreateEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/SalesOpportunityCreateEventPayload"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOcurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occured."
        }
      }
    },
    "SalesOpportunityCreateEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "salesOpportunity": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/SalesOpportunity"
        }
      }
    },
    "SalesOpportunityAttributeValueChangeEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOcurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occured."
        },
        "fieldPath": {
          "type": "string",
          "description": "The path identifying the object field concerned by this notification."
        },
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/SalesOpportunityAttributeValueChangeEventPayload"
        }
      }
    },
    "SalesOpportunityAttributeValueChangeEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "salesOpportunity": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/SalesOpportunity"
        }
      }
    },
    "SalesOpportunityStateChangeEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/SalesOpportunityStateChangeEventPayload"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOcurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occured."
        }
      }
    },
    "SalesOpportunityStateChangeEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "salesOpportunity": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/SalesOpportunity"
        }
      }
    },
    "SalesOpportunityDeleteEvent": {
      "type": "object",
      "description": "The notification data structure",
      "properties": {
        "event": {
          "description": "The event payload linked to the involved resource object",
          "$ref": "#/definitions/SalesOpportunityDeleteEventPayload"
        },
        "eventId": {
          "type": "string",
          "description": "The identifier of the notification."
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "Time of the event occurrence."
        },
        "eventType": {
          "type": "string",
          "description": "The type of the notification."
        },
        "correlationId": {
          "type": "string",
          "description": "The correlation id for this event."
        },
        "domain": {
          "type": "string",
          "description": "The domain of the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "An explnatory of the event."
        },
        "priority": {
          "type": "string",
          "description": "A priority."
        },
        "timeOcurred": {
          "type": "string",
          "format": "date-time",
          "description": "The time the event occured."
        }
      }
    },
    "SalesOpportunityDeleteEventPayload": {
      "type": "object",
      "description": "The event data structure",
      "properties": {
        "salesOpportunity": {
          "description": "The involved resource data for the event",
          "$ref": "#/definitions/SalesOpportunity"
        }
      }
    },
    "Error": {
      "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)",
      "type": "object",
      "required": [
        "code",
        "reason"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "Application relevant detail, defined in the API or a common list."
        },
        "reason": {
          "type": "string",
          "description": "Explanation of the reason for the error which can be shown to a client user."
        },
        "message": {
          "type": "string",
          "description": "More details and corrective actions related to the error which can be shown to a client user."
        },
        "status": {
          "type": "string",
          "description": "HTTP Error code extension"
        },
        "referenceError": {
          "type": "string",
          "format": "uri",
          "description": "URI of documentation describing the error."
        },
        "@baseType": {
          "type": "string",
          "description": "When sub-classing, this defines the super-class."
        },
        "@schemaLocation": {
          "type": "string",
          "format": "uri",
          "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
        },
        "@type": {
          "type": "string",
          "description": "When sub-classing, this defines the sub-class entity name."
        }
      }
    }
  }
}